// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Industry {
  id         Int       @id @default(autoincrement())
  name       String
  slug       String    @unique
  companies  Company[]
  screenerId Int
}

model Company {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  symbol      String   @unique
  description String
  industry    Industry @relation(fields: [industryId], references: [id])
  industryId  Int // relation scalar field  (used in the `@relation` attribute above)

  companyStatementDetails CompanyStatementDetails @relation(fields: [statementsId], references: [id])
  statementsId            Int

  // financialStatements   FinancialStatementFact[] // I dont think there is necessity of Relation between company and financial fact
  companyPrice     CompanyPrice[]
  stockHoldingFact StockHoldingFact[]
}

model CompanyStatementDetails {
  id                         Int       @id @default(autoincrement())
  name                       String    @unique
  balanceSheetId             Int
  profitLossId               Int
  companyEssentialsId        Int
  companyRatioId             Int
  financialHighlightsId      Int
  companyActionId            Int
  financialStatementOverview Int
  companies                  Company[]
}

model CompanyPrice {
  id               Int     @id @default(autoincrement())
  date             String
  noOfTransactions Int
  maxPrice         Float
  minPrice         Float
  closingPrice     Float
  tradedShares     Int
  amount           Float
  previousClosing  Float
  priceDifference  Float
  company          Company @relation(fields: [companySlug], references: [slug])
  companySlug      String // relation scalar field  (used in the `@relation` attribute above)
}

model StockHolding {
  id   Int    @id @default(autoincrement())
  name String
}

model StockHoldingFact {
  id        Int     @id @default(autoincrement())
  name      String
  amount    Int
  date      String
  company   Company @relation(fields: [companyId], references: [id])
  companyId Int
}

//FinancialStatement is the name of the financial report. The Income Statement, Balance Sheet is an example of a FinancialStatement
model FinancialStatement {
  id                     Int                              @id @default(autoincrement())
  name                   String
  slug                   String                           @unique
  financialStatementLine FinancialStatementLineSequence[]
}

//FinancialStatementLine is a single line-item on a FinancialStatement. An example would be Cost of Goods Sold, Share capital, Cash and cash equivalent
model FinancialStatementLine {
  id                     Int                              @id @default(autoincrement())
  name                   String                           @unique
  financialStatementFact FinancialStatementFact[]
  financialStatement     FinancialStatementLineSequence[]
  parentId               Int?
  parent                 FinancialStatementLine?          @relation("ParentChild", fields: [parentId], references: [id])
  children               FinancialStatementLine[]         @relation("ParentChild")
  unit                   String?
  description            String?
}

model FinancialStatementLineSequence {
  financialStatement       FinancialStatement     @relation(fields: [financialStatementId], references: [id])
  financialStatementId     Int
  financialStatementLine   FinancialStatementLine @relation(fields: [financialStatementLineId], references: [id])
  financialStatementLineId Int
  sequence                 Float

  @@id([financialStatementId, financialStatementLineId])
}

//FinancialStatementFact is the data for a FinancialStatementLine. For instance, what is the latest Cost of Revenue for Google?
model FinancialStatementFact {
  id                       Int                    @id @default(autoincrement())
  companyId                Int // relation scalar field  (used in the `@relation` attribute above)
  financialStatementLine   FinancialStatementLine @relation(fields: [financialStatementLineId], references: [id])
  financialStatementLineId Int
  fiscalYear               String
  quarter                  String?
  amount                   Float
}

model User {
  id             Int               @id @default(autoincrement())
  role           Role              @default(USER)
  name           String            @db.VarChar(50)
  phoneNumber    String            @unique
  email          String            @unique
  password       String
  profile        Profile?          @relation(fields: [profileId], references: [id]) // references `id` of `Profile`
  profileId      Int?              @unique
  subscription   UserSubscription? @relation(fields: [subscriptionId], references: [id]) // references `id` of `Profile`
  subscriptionId Int?              @unique
}

model Profile {
  id        Int      @id @default(autoincrement())
  userId    Int
  avtar     String
  FirstName String   @db.VarChar(25)
  LastName  String   @db.VarChar(25)
  birthDate  DateTime
  Address    String
  createdAt DateTime @default(now())
  status    Boolean  @default(true)
  user      User?
}

model UserSubscription {
  id                 Int               @id @default(autoincrement())
  userId             Int
  startAt            DateTime
  expireAt           DateTime
  subscriptionPlan   SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id]) // references `id` of `Profile`
  subscriptionPlanId Int               @unique
  user               User?
  invoice            Invoice?
}

model SubscriptionPlan {
  id             Int               @id @default(autoincrement())
  slug           String            @unique
  title          String
  description    String
  price          Float
  validityInDays Int
  isActive       Boolean
  subscription   UserSubscription?
}

model Invoice {
  id                  Int               @id @default(autoincrement())
  customerInvoiceData String
  description         String
  amount              Float
  invoiceCreatedAt    DateTime          @default(now())
  subscription        UserSubscription? @relation(fields: [subscriptionId], references: [id]) // references `id` of `Profile`
  subscriptionId      Int?              @unique
}

model Offer {
  id                 Int      @id @default(autoincrement())
  offerName          String
  startAt            DateTime
  endAt              DateTime
  discountAmount     Float
  discountPercentage Decimal
  durationMonths     Int
  durationEndDate    DateTime
}

enum Role {
  USER
  ADMIN
  MANAGER
}
